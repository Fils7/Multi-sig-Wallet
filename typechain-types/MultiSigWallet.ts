/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MultiSigWalletInterface extends utils.Interface {
  functions: {
    "OwnersCheck(address)": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "requiredSignatures()": FunctionFragment;
    "signTransaction(uint256)": FunctionFragment;
    "submit(address,uint256)": FunctionFragment;
    "transaction()": FunctionFragment;
    "txMap(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "OwnersCheck"
      | "executeTransaction"
      | "requiredSignatures"
      | "signTransaction"
      | "submit"
      | "transaction"
      | "txMap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "OwnersCheck",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "txMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "OwnersCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txMap", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Sign(address,uint256)": EventFragment;
    "Submit(address,uint256,uint256)": EventFragment;
    "transactionExecuted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "transactionExecuted"): EventFragment;
}

export interface DepositEventObject {
  sender: string;
  _value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface SignEventObject {
  _owner: string;
  _txNonce: BigNumber;
}
export type SignEvent = TypedEvent<[string, BigNumber], SignEventObject>;

export type SignEventFilter = TypedEventFilter<SignEvent>;

export interface SubmitEventObject {
  _to: string;
  _value: BigNumber;
  txNonce: BigNumber;
}
export type SubmitEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SubmitEventObject
>;

export type SubmitEventFilter = TypedEventFilter<SubmitEvent>;

export interface transactionExecutedEventObject {
  _owner: string;
  _txNonce: BigNumber;
}
export type transactionExecutedEvent = TypedEvent<
  [string, BigNumber],
  transactionExecutedEventObject
>;

export type transactionExecutedEventFilter =
  TypedEventFilter<transactionExecutedEvent>;

export interface MultiSigWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiSigWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OwnersCheck(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    executeTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requiredSignatures(overrides?: CallOverrides): Promise<[BigNumber]>;

    signTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submit(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transaction(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        to: string;
        value: BigNumber;
        confirmations: BigNumber;
        signature: string;
      }
    >;

    txMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        to: string;
        value: BigNumber;
        confirmations: BigNumber;
        signature: string;
      }
    >;
  };

  OwnersCheck(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  executeTransaction(
    _txIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;

  signTransaction(
    _txIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submit(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transaction(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      to: string;
      value: BigNumber;
      confirmations: BigNumber;
      signature: string;
    }
  >;

  txMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      to: string;
      value: BigNumber;
      confirmations: BigNumber;
      signature: string;
    }
  >;

  callStatic: {
    OwnersCheck(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;

    signTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submit(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transaction(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        to: string;
        value: BigNumber;
        confirmations: BigNumber;
        signature: string;
      }
    >;

    txMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        to: string;
        value: BigNumber;
        confirmations: BigNumber;
        signature: string;
      }
    >;
  };

  filters: {
    "Deposit(address,uint256)"(
      sender?: null,
      _value?: null
    ): DepositEventFilter;
    Deposit(sender?: null, _value?: null): DepositEventFilter;

    "Sign(address,uint256)"(
      _owner?: PromiseOrValue<string> | null,
      _txNonce?: null
    ): SignEventFilter;
    Sign(
      _owner?: PromiseOrValue<string> | null,
      _txNonce?: null
    ): SignEventFilter;

    "Submit(address,uint256,uint256)"(
      _to?: null,
      _value?: null,
      txNonce?: null
    ): SubmitEventFilter;
    Submit(_to?: null, _value?: null, txNonce?: null): SubmitEventFilter;

    "transactionExecuted(address,uint256)"(
      _owner?: PromiseOrValue<string> | null,
      _txNonce?: null
    ): transactionExecutedEventFilter;
    transactionExecuted(
      _owner?: PromiseOrValue<string> | null,
      _txNonce?: null
    ): transactionExecutedEventFilter;
  };

  estimateGas: {
    OwnersCheck(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;

    signTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submit(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transaction(overrides?: CallOverrides): Promise<BigNumber>;

    txMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OwnersCheck(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requiredSignatures(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submit(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transaction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    txMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
